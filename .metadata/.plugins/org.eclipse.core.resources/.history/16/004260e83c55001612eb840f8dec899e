package com.wmsl.outstanding.core;

import java.io.BufferedWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;
import java.util.Locale;

import org.springframework.stereotype.Component;

import com.wealth.bwm.batch.impl.entity.cp.account.AccountBatch;
import com.wealth.bwm.batch.impl.entity.cp.account.CreditloanAccountBatch;
import com.wealth.bwm.batch.impl.entity.cp.account.SubAccountBatch;
import com.wealth.bwm.batch.impl.entity.cp.account.SubCreditLoanAccountBatch;
import com.wealth.bwm.batch.impl.entity.cp.account.execution.ExecutionBatch;
import com.wealth.bwm.batch.impl.entity.cp.account.outstanding.CreditLoanOutstandingBatch;
import com.wealth.bwm.batch.impl.entity.cp.account.outstanding.OutstandingBatch;
import com.wealth.exception.dao.InfoEntityServiceException;
import com.wealth.exception.dao.ServerEntityServiceException;
import com.wmsl.Constants;
import com.wmsl.utils.GenDataDBUtils;

@Component
public class AYCalCore extends GenOutStandingDataCore{



	@Override
	public void subOutstandingToString(BufferedWriter bufferedWriter, OutstandingBatch outstanding) throws IOException {
		CreditLoanOutstandingBatch CreditloanOutstanding = (CreditLoanOutstandingBatch)outstanding;
		
		bufferedWriter.write(prepareData(CreditloanOutstanding.getOutstandingId()));
		bufferedWriter.write(COMMA_STRING + COMMA_STRING + COMMA_STRING + COMMA_STRING + COMMA_STRING);
		
		bufferedWriter.write(prepareData(CreditloanOutstanding.getDueDate()) + COMMA_STRING);
		bufferedWriter.write(COMMA_STRING);
		bufferedWriter.write(prepareData(CreditloanOutstanding.getMaturityDate()) + COMMA_STRING);
		bufferedWriter.write(COMMA_STRING + COMMA_STRING + COMMA_STRING);
		bufferedWriter.write(prepareData(CreditloanOutstanding.getInterestRate()) + COMMA_STRING);
		bufferedWriter.write(COMMA_STRING);
		bufferedWriter.write(prepareData(CreditloanOutstanding.getFaceValue()) + COMMA_STRING);
		bufferedWriter.write(prepareData(CreditloanOutstanding.getInstallmentAmount()) + COMMA_STRING);
		bufferedWriter.write(COMMA_STRING + COMMA_STRING + COMMA_STRING + COMMA_STRING + COMMA_STRING);
		bufferedWriter.write(prepareData(CreditloanOutstanding.getDelinquencyDesc()));

		bufferedWriter.newLine();
	}

	@Override
	public void subExecutionToString(BufferedWriter bufferedWriter, ExecutionBatch execution) throws IOException {
		throw new UnsupportedOperationException();
	}

	
	
	/*
	 * Get Object Account
	 * (non-Javadoc)
	 * @see com.wmsl.core.GenBigDataCore#getAccount()
	 */
	@Override
	public AccountBatch getAccount() {
		CreditloanAccountBatch creditloanAccount = new CreditloanAccountBatch();
		creditloanAccount.setSource(Constants.SOURCE_AYCAL);
		return creditloanAccount;
	}

	@Override
	public SubAccountBatch getSubAccount() {
		return new SubCreditLoanAccountBatch();
	}
	@Override
	public OutstandingBatch getOutstanding() {
		return new CreditLoanOutstandingBatch();
	}

	@Override
	public ExecutionBatch getExecution() {
		throw new UnsupportedOperationException();
	}


	/*
	 * get Dir
	 * (non-Javadoc)
	 * @see com.wmsl.core.GenBigDataCore#getDir(java.lang.String)
	 * 
	 * 
	 */
	@Override
	public String getDir(String dir) {
		return Constants.DIR_LIAB_AYCAL + dir;
	}
	@Override
	public String getFilenameAcc() {
		return Constants.FILE_NAME_LIAB_ACC + getStartDate().get(Calendar.YEAR);
	}

	@Override
	public String getFilenameSubAcc() {
		return Constants.FILE_NAME_LIAB_SUBACC + getStartDate().get(Calendar.YEAR);
	}

	@Override
	public String getFilenamePos() {
		return Constants.FILE_NAME_LIAB_POS;
	}

	@Override
	public String getFilenameTx() {
		return Constants.FILE_NAME_LIAB_TX + getStartDate().get(Calendar.YEAR);
	}
	
	@Override
	public String getFilenameAccount() {
		return Constants.FILE_NAME_ACCOUNT_LIAB + getStartDate().get(Calendar.YEAR);
	}

	@Override
	public String getFilenameSubAccount() {
		return Constants.FILE_NAME_SUBACCOUNT_LIAB + getStartDate().get(Calendar.YEAR);
	}

	@Override
	public String getFilenameExecution(){
		return Constants.FILE_NAME_EXECUTION_LIAB + getStartDate().get(Calendar.YEAR);
	}
	
	@Override
	public String getFilenameOutstanding() {
		return Constants.FILE_NAME_OUTSTANDING_LIAB;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<SubAccountBatch> getSubAccountDB() throws InfoEntityServiceException, ServerEntityServiceException {
		
		List<? extends SubAccountBatch> subAccounts = new ArrayList<SubAccountBatch>();
		return (List<SubAccountBatch>) subAccounts;
	}

	@Override
	protected List<OutstandingBatch> getOutstandingList() throws InfoEntityServiceException, ServerEntityServiceException {
		// TODO Auto-generated method stub
		return null;
	}
	
}
